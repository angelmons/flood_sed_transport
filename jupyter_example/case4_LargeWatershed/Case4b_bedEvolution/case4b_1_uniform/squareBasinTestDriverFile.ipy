# -*- coding: utf-8 -*-
"""
Created on Thu Jun  9 18:22:27 2022
@author: angelmonsalve

Driver file for: Case 4 - Test in large watershed - uniform rainfall - Bed evolution

"""

""" Loads components and other libraries"""
%reset -f
import numpy as np
import pandas as pd
import copy
import os
import shutil
from matplotlib import pyplot as plt
from landlab.components import OverlandFlowSpatiallyVariableInputs, RiverBedDynamics
from landlab.io import read_esri_ascii
#from landlab import imshow_grid
from saveRaster import saveRaster

""" Numerical simulation conditions and time control settings"""
bedElevation = 'Square_TestBasin.asc'         # ASCII raster DEM containing the bed surface elevation
rainfallFile = 'rainfallIntensity.xlsx'
gsd = pd.read_excel('bedGSD.xlsx',sheet_name='GSD',skiprows=0).values

dtPrecision = 3         # Avoids rounding errors
max_dt = 1           # Overland flow will use the min time step between this value and the automatically calculated. Use seconds.
tPlot = 1800            # Plots will be obtained every this seconds
storeData = 5           # Stores results every this time
tmax = 24*3600+max_dt   # Maximum simulation time, adding max_dt ensures that the last time is stored
nCyclesFlow = 5

# Flow, bed, and upstream simulation conditions 
n = 0.035                             # Manning's n

# Link and node where samples will be collected
link_to_sample = np.array([299, 698,1496,2694,32221])
node_to_sample = np.array([300,700,16102])

# Remove previous figures
directory = os.getcwd() ; test = os.listdir( directory )

for item in test:
    if item.endswith(".png"):
        os.remove( os.path.join( directory, item ) )
    if item.endswith(".txt"):
        os.remove( os.path.join( directory, item ) )  
        
# Creates fields and instantiate the component
OverlandFlowSpatiallyVariableInputs.input_var_names
RiverBedDynamics.input_var_names
(rmg, z) = read_esri_ascii(bedElevation, name='topographic__elevation')
rmg.add_zeros('bed_surface__roughness', at = 'link')
rmg.add_zeros('surface_water__depth', at = 'node')
rmg.add_zeros('rainfall__intensity', at = 'node')
rmg['node']['bed_surface__grainSizeDistribution_location'] = np.zeros_like(z)     

# List of links and nodes
linkList = np.arange(0,rmg.number_of_links)
nodeList = np.arange(0,rmg.number_of_nodes)

# Instantiation of components
of = OverlandFlowSpatiallyVariableInputs(rmg, dt_max=max_dt, alpha=0.3,steep_slopes=True)
rbd = RiverBedDynamics(rmg , gsd = gsd, variableCriticalShearStress = True)

# Set boundaries as closed boundaries, the outlet is set to an open boundary. 
#rmg.set_watershed_boundary_condition_outlet_id([69,104], z, 45.)
rmg.set_watershed_boundary_condition(z)

# Create bed and flow initial condition
rmg['link']['bed_surface__roughness'] = np.zeros(rmg.number_of_links) + n   # n is Manning's roughness coefficient

rainfallIntensity = pd.read_excel(rainfallFile)
pTime=rainfallIntensity.values[:,0]
pI=rainfallIntensity.values[:,1] * (2.77778 * 10 ** -7)  # rainfall in m/s
p_i = 0                                # current index for time

""" Defines some variables to store data and run the actual simulation """
storeNow = True
plotNow = True                          # Used to save the plot at time zero
check_tmax = True
tPlotOrg=copy.deepcopy(tPlot)           # A copy of tPlot
storeDataOrg=copy.deepcopy(storeData)   # A copy of tPlot
outputFolder = 'output'
cwd = os.getcwd()

if os.path.exists(outputFolder):
    print('The folder') 
    print(outputFolder)
    print('Exists and it will be removed \n');
    shutil.rmtree(outputFolder)     
os.mkdir(outputFolder)
   
""" Now runs the actual simulation """
t = 0                                 # Initializates the variable
while t < tmax:
    
    rbd.t = t           # Current simulation time
    
    #Calculates the rainfall intensity - variable in time
    if (t >= pTime[p_i+1]):
        rmg['node']['rainfall__intensity'] =  np.zeros(rmg.number_of_nodes) + pI[p_i+1]
        p_i += 1
    else:
        rmg['node']['rainfall__intensity'] = np.zeros(rmg.number_of_nodes) + pI[p_i+1]
    
    of.overland_flow()  # Runs overland flow for one time step
    rbd.run_one_step()  # Runs riverBedDynamics for one time step
    
    # Flow corrector
    if rbd._id_erodedNodes.shape[0] > 0 :
        print("Correcting Flow")
        # Copy current flow variables
        hNow = copy.deepcopy(rmg["node"]["surface_water__depth"])
        qNow = copy.deepcopy(rmg["link"]["surface_water__discharge"])
        hLinksNow = copy.deepcopy(rmg["link"]["surface_water__depth"])
        dtNow = copy.deepcopy(of.dt)
        
        # Links connecting the scoured nodes
        erodedNodes = np.unique(rbd._id_erodedNodes)
        erodedLinks = np.unique(rmg.links_at_node[erodedNodes])
        nonErodedLinks = ~np.isin(linkList,erodedLinks)
        nonErodedNodes = ~np.isin(nodeList,erodedNodes)
        
        # Let the flow run for a number of cycles
        for i in np.arange(0,nCyclesFlow):
            of.overland_flow()  # Runs overland flow for one time step

        # Now we get the updated h
        rmg["node"]["surface_water__depth"][nonErodedNodes] = hNow[nonErodedNodes]
        rmg["link"]["surface_water__discharge"][nonErodedLinks] = qNow[nonErodedLinks]
        rmg["link"]["surface_water__depth"][nonErodedLinks] = hLinksNow[nonErodedLinks]  
        of.dt = copy.deepcopy(dtNow)
        
    ## Stores results
    storeData = round(storeData-of.dt, dtPrecision)
    if (storeData <=0) or storeNow:
        os.chdir(outputFolder)
        print('Elapsed time :',np.round(t,1),' s. Current dt =',\
              np.round(of.dt,1),'. Adaptive time =',np.round(of._adaptive_dt,1),' s - Saving data \n')
        data = np.hstack([t,(np.abs(of._q[link_to_sample] * rmg.dx))])
        data = np.reshape(data,[1,data.shape[0]])
        with open("output0_links_surface_water__discharge.txt", "ab") as f:
            np.savetxt(f, data,'%.3f')
        data = np.hstack([t,(of._h[node_to_sample])])
        data = np.reshape(data,[1,data.shape[0]])
        with open("output1_node_surface_water__depth.txt", "ab") as f:
            np.savetxt(f, data,'%.3f')      
        data = np.hstack([t,rmg.at_node["topographic__elevation"][node_to_sample]])
        data = np.reshape(data,[1,data.shape[0]])
        with open("output3_node_topographic__elevation.txt", "ab") as f:
            np.savetxt(f, data,'%.3f')  
        storeData = round(storeDataOrg, dtPrecision)
        storeNow = False
        os.chdir(cwd)

    tPlot = round(tPlot-of.dt, dtPrecision)
    if tPlot <= 0  or plotNow:
        os.chdir(outputFolder)
        
        print('Elapsed time :',np.round(t,1),' s. Current dt =',\
              np.round(of.dt,1),'. Adaptive time =',np.round(of._adaptive_dt,1),' s - Saving plot \n')
        
        # Water depth raster
        filename='depth_'+str(np.round(t,0))+'.asc'    
        data = rmg.at_node["surface_water__depth"]
        saveRaster(data,filename,rmg)
        
        #Bed surface elevation plot
        filename='topographicElevation_'+str(np.round(t,0))+'.asc'    
        data = rmg.at_node["topographic__elevation"]
        saveRaster(data,filename,rmg)
        
        #Bed surface variation plot
        filename = 'topographicVariation_'+str(np.round(t,0))+'.asc'    
        data = rmg.at_node["topographic__elevation"] - rmg.at_node['topographic__elevation_original'] 
        saveRaster(data,filename,rmg)

        x, y0, y1, y2 , y3, y4 = np.loadtxt('output0_links_surface_water__discharge.txt', delimiter=' ', unpack=True)
        plt.plot(x,y0,x,y1,x,y2,x,y3,x,y4)
        plt.xlim([0,18*3600])
        plt.ylim([0,45])
        plt.show()    

        plotNow = False
        tPlot = tPlotOrg
        os.chdir(cwd)

    # Updating t
    if (t + of.dt > tmax) and check_tmax:
        of.dt = tmax - t
        t = tmax
        storeDataNow = True  
        plotNow = True
        check_tmax = False
    else:
        t = round(t + of.dt, dtPrecision)  
    
